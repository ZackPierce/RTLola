stages:
  - check
  - build
  - test
  - tests
  - bench

# Install additional packages, like a C compiler and cmake
#before_script:
#- apt-get update -yqq
#- apt-get install -yqq --no-install-recommends build-essential cmake

# Use cargo to check the source code formatting
cargo:check-format:
  stage: check
  image: rust:latest
  before_script:
    - rustup component add rustfmt-preview
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo fmt --all --verbose -- --check

# Use cargo to run clippy (Rust linter)
cargo:clippy:
  stage: check
  image: rust:latest
  before_script:
    - rustup component add clippy-preview
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo clippy

# Check that every ignored test has an accompanying comment
check-ignored-tests:
  stage: check
  image: alpine:latest
  before_script:
    - apk update && apk add --no-cache bash
  script:
    - ./check_ignored_tests_without_comment.sh
  allow_failure: true

# Use cargo to test the project on stable toolchain
cargo:test:
  stage: test
  image: rust:latest
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo test --all --all-features --verbose

# Use cargo to test the project on stable toolchain on windows
cargo:test:windows:
  stage: tests
  tags:
    - windows
  image: rust:latest
  script:
    - rustup update
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo test --all --all-features --verbose
  allow_failure: true

# Use cargo to test the project on nightly toolchain
cargo:test-nightly:
  stage: tests
  image: rustlang/rust:nightly
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo test --all --all-features --verbose
  allow_failure: true

# Run the tool by checking the number of triggers fired
integration_tests:
  stage: tests
  image: rust:latest
  variables:
    BUILD_MODE: "release"
  script:
    - cd tests && python3 ./streamlab-e2e-tests.py

# Use cargo to run the benchmarks
cargo:bench:
  stage: bench
  tags:
    - benchmarking
  image: rustlang/rust:nightly
  script:
    - rustc --version && cargo --version      # Print version info for debugging
    - cargo bench --quiet | grep -e 'bench:' | tee bench_results.txt # TODO: actually compare the results
  artifacts:
      name: "bench_results"
      paths:
        - bench_results.txt
      expire_in: 5 yrs
  allow_failure: true

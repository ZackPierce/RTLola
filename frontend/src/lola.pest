// Status: WIP (Draft)


// Take a look at https://pest-parser.github.io/book/grammars/syntax.html
// TODO we can probably mark some rules as atomic or hidden

IncompleteSpec = { SOI ~ LanguageSpec? ~ ImportStmts ~ Declaration* }
Spec = { SOI ~ LanguageSpec? ~ ImportStmts ~ Declaration* ~ EOI }
LanguageSpec ={ "//!" ~("ClassicLola" | "Lola2.0" | "RTLola") }
ImportStmts = _{ ImportStmt* }
ImportStmt  = { "import" ~ Ident }
Declaration = _{IncludeStatement | TypeDecl | ConstantStream | InputStream | OutputStream | Trigger}

//////////////////////////////////////////////////
/////////////////// Statements ///////////////////
//////////////////////////////////////////////////

ParamList = { "<" ~(ParameterDecl ~("," ~ParameterDecl)*)? ~">"}
ParameterDecl = { Ident ~ ":" ~ Type? }

TemplateSpec = { 
      "{" ~
        InvokeDecl? ~
        ExtendDecl? ~
        TerminateDecl? ~
      "}"}

InvokeDecl = { "invoke" ~Expr ~(InvokeIf | InvokeUnless)? }
InvokeIf = { "if" ~Expr }
InvokeUnless = { "unless" ~Expr }

ExtendDecl = { "extend" ~ Expr }

ActivationCondition = { "@" ~ Expr }

TerminateDecl = { "terminate" ~Expr }

IncludeStatement = { "include"~ StringLiteral}

TypeDecl = { "type"~ Ident ~"{" ~Ident~ ":"~Type~ ("," ~Ident~ ":"~Type)* ~ "}"}

ConstantStream = { "constant"~ Ident ~ (":" ~ Type)? ~":=" ~Literal}

InputStream = { "input" ~Ident ~ ParamList? ~ (":" ~ Type)? ~(","~ Ident~ ParamList? ~ ":" ~ Type)*}

OutputStream = { "output"~ Ident ~ ParamList?~ (":" ~ Type)? ~ ActivationCondition? ~ TemplateSpec? ~":="~ Expr}

Trigger = { "trigger"~ (Ident ~ ":=")? ~ Expr~ StringLiteral?}

//////////////////////////////////////////////////
////////////////// Expressions ///////////////////
//////////////////////////////////////////////////

// TODO take a look at https://pest-parser.github.io/book/ and the usage of the PrecClimber

// Precedences:
// Atomic < TernaryExpr < BooleanDisExpr < BooleanConExpr 
//      < CompExpr < AddExpr < MultiExpr < ExpoExpr < UnaryExpr < DefaultExpr 
//      < FunctionExpr < LookupExpr

Operation = _{ Add | Subtract | Power | Multiply | Divide | Mod | And | Or | CompOp | Default | Hold }
    Add      = { "+"  }
    Subtract = { "-"  }
    Multiply = { "*"  }
    Divide   = { "/"  }
    Mod      = { "%"  }
    Power    = { "**" }
    And      = { "∧" | "&"{1,2} | "and" }
    Or       = { "∨" | "|"{1,2} | "or"  }
    Dot      = { "." }
    Default  = { "?" }
    Hold     = { "!" }

UnaryOperation = _{ Add | Subtract | Neg }
    Neg      = { "!" | "¬" }

Expr = { (Term ~ ( (Operation ~ Term) | (Dot ~ (IntegerLiteral | FunctionExpr | Ident)) )*) }
// TODO Do we need Term to exist for the precedence climber?
Term = _{ MissingExpression | Literal | ParenthesizedExpression | LookupExpr | UnaryExpr | TernaryExpr | FunctionExpr | Ident | Tuple}

ParenthesizedExpression = {OpeningParenthesis ~ Expr ~ ClosingParenthesis | OpeningParenthesis ~ Expr ~ MissingClosingParenthesis}
OpeningParenthesis = {"("}
ClosingParenthesis = {")"}

MissingClosingParenthesis = {WHITESPACE* ~ &("then" | "else" |"output" | "input" | "trigger" | "constant" | "Type" | "include" | EOI)}
MissingExpression = {WHITESPACE* ~ &("then" | "else" |")"|"output" | "input" | "trigger" | "constant" | "Type" | "include" | EOI)}

LookupExpr = { StreamInstance ~"["~ Expr~ "]" }

// Functions
FunctionExpr = { FunctionSymbol ~ GenericParam? ~ FunctionArgs }
GenericParam = { "<" ~ Type ~ ("," ~ Type)* ~ ">" }
FunctionArgs = { ( "(" ~ ")" ) | ( "(" ~ FunctionArg ~ ("," ~ FunctionArg)* ~ ")" ) }
FunctionArg = { (Ident ~ ":")? ~ Expr }

UnaryExpr = { UnaryOperation~ Term }

TernaryExpr = { "if"~ Expr~ "then"~ Expr~ "else"~ Expr }

Tuple = { "("~ (Expr~ (","~ Expr)+)?~ ")"}


//////////////////////////////////////////////////
//////////// Operators and Functions /////////////
//////////////////////////////////////////////////

LessThan = {"<"}
LessThanOrEqual = {"<=" | "≤"}
MoreThan = {">"}
MoreThanOrEqual = {">=" | "≥"}
NotEqual = {"!=" | "≠"}
Equal = { "="{1,2} }
CompOp = _{LessThanOrEqual | MoreThanOrEqual | LessThan | MoreThan | NotEqual | Equal}

Sum = {"Σ" | "sum"}
Count = {"#"|"count"}
Product = {"Π" | "prod"}
Integral = {"∫"  | "integral"}
Average = { "avg" }

WindowOp = _{ Sum | Product | Average | Count | Integral}

FunctionSymbol = _{ Ident }


//////////////////////////////////////////////////
//////////////////// Literals ////////////////////
//////////////////////////////////////////////////

NumberLiteral = ${ NumberLiteralValue ~ NumberPostfix?}
NumberLiteralValue = @{ ("+" | "-")?~ Digit+~ ("."~ Digit*)?~ ("e"~ ("+" | "-")?~ Digit*)? }

StringLiteral = _{ "\""~ String~ "\""}
String = @{("\\\""|!("\"") ~ ANY)*}
// A raw string literal, e.g., r#"a\"b"#
RawStringLiteral = _{ "r" ~ PUSH("#"*) ~ "\"" ~ RawString ~ "\"" ~ POP }
RawString = @{ (!("\"" ~ PEEK) ~ ANY)* }

BooleanLiteral = _{ True | False}
True = @{"true"| "⊤"}
False = @{"false"  | "⊥"}
Literal = { StringLiteral | RawStringLiteral | NumberLiteral | BooleanLiteral}

IntegerLiteral = @{ Digit+ }
SignedIntegerLiteral = @{ ("+" | "-")?~IntegerLiteral }
NumberPostfix = @{ LETTER+ }

Type = {"("~ (Type ~(","~Type)*)?~ ")" | Ident | "_"}  // _ => infer type

//////////////////////////////////////////////////
///////////////////// Names //////////////////////
//////////////////////////////////////////////////

Ident = @{  (Letter | "_") ~ (Letter | Digit | "_")* | WindowOp}

Parameter = { Ident} // Semantic Category

StreamInstance = { Ident ~("(" ~Expr ~(","~ Expr)* ~")")?}

//////////////////////////////////////////////////
//////////////////// Symbols /////////////////////
//////////////////////////////////////////////////

Letter = { 'a'..'z' | 'A'..'Z'}
Digit = _{'0'..'9'}
Number = { '0'..'9'+ }
WHITESPACE = _{ " " | "\t" | "\r" | "\n"}
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~(!("\n")~ANY)*~ "\n"? ) }
